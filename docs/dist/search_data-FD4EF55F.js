searchData={"items":[{"type":"module","title":"AddressBookEcto","doc":"`AddressBookEcto` is the main module for a command-line Address Book application that uses Ecto\nfor database interactions. It provides functionalities for user authentication (registration, login, logout)\nand contact management (add, edit, view, delete, search contacts).\n\nThis module manages the application's main loop, transitioning between pre-login (authentication)\nand post-login (contact management) states based on the user's login status.","ref":"AddressBookEcto.html"},{"type":"module","title":"Usage - AddressBookEcto","doc":"To start the application, typically from your application supervisor:\n\n    AddressBookEcto.run()\n\nThe application will then present a menu in the console, guiding the user through\nauthentication or contact management.\n\n**WARNING**: This implementation stores user passwords in plain text. For a production\napplication, it's crucial to use a secure password hashing library like `Comeonin`.","ref":"AddressBookEcto.html#module-usage"},{"type":"function","title":"AddressBookEcto.auth_menu/0","doc":"Displays the authentication menu options.\n\nThis menu is shown when no user is logged in, providing options for registration, login, or exiting the application.","ref":"AddressBookEcto.html#auth_menu/0"},{"type":"function","title":"Returns - AddressBookEcto.auth_menu/0","doc":"* `:ok` (prints to console)","ref":"AddressBookEcto.html#auth_menu/0-returns"},{"type":"function","title":"AddressBookEcto.contact_menu/0","doc":"Displays the contact management menu options.\n\nThis menu is shown when a user is logged in, providing options for adding, editing,\nviewing, deleting, searching contacts, or logging out.","ref":"AddressBookEcto.html#contact_menu/0"},{"type":"function","title":"Returns - AddressBookEcto.contact_menu/0","doc":"* `:ok` (prints to console)","ref":"AddressBookEcto.html#contact_menu/0-returns"},{"type":"function","title":"AddressBookEcto.create/1","doc":"Guides the user through adding a new contact.\n\nIt prompts for contact details (first name, last name, contact number, email)\nand then proceeds to a review/save menu. Users can type `*` at any prompt to\ncancel and return to the main menu.","ref":"AddressBookEcto.html#create/1"},{"type":"function","title":"Parameters - AddressBookEcto.create/1","doc":"* `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#create/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.create/1","doc":"* This function interacts with the user and calls `review_new_contact/2`\n    or `main_loop/1`. It does not return a specific value.","ref":"AddressBookEcto.html#create/1-returns"},{"type":"function","title":"AddressBookEcto.delete/1","doc":"Allows the current user to delete an existing contact.\n\nIt displays the user's contacts, prompts for a contact ID to delete.\nUsers can type `*` to cancel and return to the main menu.","ref":"AddressBookEcto.html#delete/1"},{"type":"function","title":"Parameters - AddressBookEcto.delete/1","doc":"* `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#delete/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.delete/1","doc":"* This function interacts with the user and the database, then calls `view/1`\n    or `main_loop/1`. It does not return a specific value.","ref":"AddressBookEcto.html#delete/1-returns"},{"type":"function","title":"AddressBookEcto.display_contact/1","doc":"Displays the details of a single contact, including its database ID.","ref":"AddressBookEcto.html#display_contact/1"},{"type":"function","title":"Parameters - AddressBookEcto.display_contact/1","doc":"* `contact`: An `AddressBookEcto.Contact` struct to be displayed.","ref":"AddressBookEcto.html#display_contact/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.display_contact/1","doc":"* `:ok` (prints to console)","ref":"AddressBookEcto.html#display_contact/1-returns"},{"type":"function","title":"AddressBookEcto.display_contacts/1","doc":"Displays a list of contacts by iterating over them and calling `display_contact/1` for each.","ref":"AddressBookEcto.html#display_contacts/1"},{"type":"function","title":"Parameters - AddressBookEcto.display_contacts/1","doc":"* `contacts`: A `List` of `AddressBookEcto.Contact` structs to be displayed.","ref":"AddressBookEcto.html#display_contacts/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.display_contacts/1","doc":"* `:ok` (prints to console)","ref":"AddressBookEcto.html#display_contacts/1-returns"},{"type":"function","title":"AddressBookEcto.edit/1","doc":"Allows the current user to edit an existing contact.\n\nIt displays the user's contacts, prompts for a contact ID to edit,\nthen allows updating individual fields. Users can type `*` at any prompt\nto cancel and return to the main menu.","ref":"AddressBookEcto.html#edit/1"},{"type":"function","title":"Parameters - AddressBookEcto.edit/1","doc":"* `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#edit/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.edit/1","doc":"* This function interacts with the user and the database, then calls `view/1`\n    or `main_loop/1`. It does not return a specific value.","ref":"AddressBookEcto.html#edit/1-returns"},{"type":"function","title":"AddressBookEcto.edit_new_contact_details/2","doc":"Allows the user to edit the details of a contact they are currently creating.\n\nIt prompts for each field, allowing blank input to keep the existing value.\nUsers can type `*` to cancel and return to the main menu.","ref":"AddressBookEcto.html#edit_new_contact_details/2"},{"type":"function","title":"Parameters - AddressBookEcto.edit_new_contact_details/2","doc":"* `current_details`: A `Map` containing the current details of the contact being created.\n  * `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#edit_new_contact_details/2-parameters"},{"type":"function","title":"Returns - AddressBookEcto.edit_new_contact_details/2","doc":"* This function interacts with the user and calls `review_new_contact/2`\n    or `main_loop/1`. It does not return a specific value.","ref":"AddressBookEcto.html#edit_new_contact_details/2-returns"},{"type":"function","title":"AddressBookEcto.end_session/0","doc":"Ends the application session gracefully.\n\nThis function is called when the user selects to end the session (e.g., by entering '0'\nin the authentication menu or by reaching end-of-file (Ctrl+D) in input).\nThe process will exit naturally when `IO.gets` receives `:eof` in `main_loop`\nor the external shell process terminates.","ref":"AddressBookEcto.html#end_session/0"},{"type":"function","title":"Returns - AddressBookEcto.end_session/0","doc":"* `:ok`","ref":"AddressBookEcto.html#end_session/0-returns"},{"type":"function","title":"AddressBookEcto.get_input/1","doc":"Gets input from the user with a given prompt and trims leading/trailing whitespace.","ref":"AddressBookEcto.html#get_input/1"},{"type":"function","title":"Parameters - AddressBookEcto.get_input/1","doc":"* `prompt`: The `String` message to display to the user before reading input.","ref":"AddressBookEcto.html#get_input/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.get_input/1","doc":"* A `String.t()` containing the user's trimmed input.","ref":"AddressBookEcto.html#get_input/1-returns"},{"type":"function","title":"AddressBookEcto.handle_auth_action/1","doc":"Handles actions when no user is logged in (registration, login, exit).\n\nIt directs the flow based on the user's menu choice.","ref":"AddressBookEcto.html#handle_auth_action/1"},{"type":"function","title":"Parameters - AddressBookEcto.handle_auth_action/1","doc":"* `input`: A `String` representing the user's menu selection.","ref":"AddressBookEcto.html#handle_auth_action/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.handle_auth_action/1","doc":"* This function calls other functions which eventually lead back to `main_loop(nil)`,\n    so it doesn't return a specific value itself.","ref":"AddressBookEcto.html#handle_auth_action/1-returns"},{"type":"function","title":"AddressBookEcto.handle_contact_action/2","doc":"Handles actions when a user is logged in (Add, Edit, View, Delete contacts, Logout, Search).\n\nIt directs the flow based on the user's menu choice and the `current_user`.","ref":"AddressBookEcto.html#handle_contact_action/2"},{"type":"function","title":"Parameters - AddressBookEcto.handle_contact_action/2","doc":"* `input`: A `String` representing the user's menu selection.\n  * `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#handle_contact_action/2-parameters"},{"type":"function","title":"Returns - AddressBookEcto.handle_contact_action/2","doc":"* This function calls other functions which eventually lead back to `main_loop(current_user)`,\n    so it doesn't return a specific value itself.","ref":"AddressBookEcto.html#handle_contact_action/2-returns"},{"type":"function","title":"AddressBookEcto.login/0","doc":"Logs in an existing user by checking the provided username and password\nagainst the database.\n\n**WARNING**: This function performs a plain text password check. For production,\nimplement secure password verification using hashing (e.g., `Bcrypt` via `Comeonin`).","ref":"AddressBookEcto.html#login/0"},{"type":"function","title":"Returns - AddressBookEcto.login/0","doc":"* This function interacts with the user via `IO.gets` and `IO.puts`.\n    If login is successful, it calls `main_loop(fetched_user)`; otherwise,\n    it calls `main_loop(nil)`.","ref":"AddressBookEcto.html#login/0-returns"},{"type":"function","title":"AddressBookEcto.logout/0","doc":"Logs out the current user.\n\nIt returns the application to the pre-login state by calling `main_loop(nil)`.","ref":"AddressBookEcto.html#logout/0"},{"type":"function","title":"Returns - AddressBookEcto.logout/0","doc":"* This function calls `main_loop(nil)` and does not return a specific value itself.","ref":"AddressBookEcto.html#logout/0-returns"},{"type":"function","title":"AddressBookEcto.main_loop/1","doc":"The main application loop that handles both pre-login and post-login states.\n\nThe state is managed by passing the `current_user` struct (or `nil` if not logged in)\nthrough recursive calls. It displays the appropriate menu and delegates input handling.","ref":"AddressBookEcto.html#main_loop/1"},{"type":"function","title":"Parameters - AddressBookEcto.main_loop/1","doc":"* `current_user`: An `AddressBookEcto.User` struct if a user is logged in,\n    or `nil` if no user is logged in.","ref":"AddressBookEcto.html#main_loop/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.main_loop/1","doc":"* This function calls itself recursively and does not return a specific value\n    until the session is ended.","ref":"AddressBookEcto.html#main_loop/1-returns"},{"type":"function","title":"AddressBookEcto.register/0","doc":"Registers a new user by getting username and password from the console\nand inserting them into the database.\n\n**WARNING**: This implementation stores passwords in plain text. In a\nproduction environment, use a library like `Comeonin` for secure password hashing.","ref":"AddressBookEcto.html#register/0"},{"type":"function","title":"Returns - AddressBookEcto.register/0","doc":"* This function interacts with the user via `IO.gets` and `IO.puts`,\n    and then calls `main_loop(nil)` to return to the authentication menu.","ref":"AddressBookEcto.html#register/0-returns"},{"type":"function","title":"AddressBookEcto.review_new_contact/2","doc":"Displays a summary of the new contact details and provides options to\nsave, edit, or cancel the contact creation.","ref":"AddressBookEcto.html#review_new_contact/2"},{"type":"function","title":"Parameters - AddressBookEcto.review_new_contact/2","doc":"* `contact_details`: A `Map` containing the `first_name`, `last_name`,\n    `contact`, and `email` of the new contact.\n  * `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#review_new_contact/2-parameters"},{"type":"function","title":"Returns - AddressBookEcto.review_new_contact/2","doc":"* This function interacts with the user and calls `save_new_contact/2`,\n    `edit_new_contact_details/2`, or `main_loop/1`. It does not return a specific value.","ref":"AddressBookEcto.html#review_new_contact/2-returns"},{"type":"function","title":"AddressBookEcto.run/0","doc":"Starts the address book application loop.\n\nThis function is typically called from the application supervisor's `start` function.\nIt initializes the main loop in a pre-login state (no user logged in).\n\nThe Ecto repository (`AddressBookEcto.Repo`) is expected to be started\nin the application's supervision tree before calling this function.","ref":"AddressBookEcto.html#run/0"},{"type":"function","title":"Examples - AddressBookEcto.run/0","doc":"iex> AddressBookEcto.run()\n    # Starts the application loop, presenting the authentication menu.","ref":"AddressBookEcto.html#run/0-examples"},{"type":"function","title":"AddressBookEcto.save_new_contact/2","doc":"Saves the new contact details to the database, associating it with the `current_user`.\n\nIt constructs a changeset for `AddressBookEcto.Contact` and attempts to insert it.","ref":"AddressBookEcto.html#save_new_contact/2"},{"type":"function","title":"Parameters - AddressBookEcto.save_new_contact/2","doc":"* `contact_details`: A `Map` containing the `first_name`, `last_name`,\n    `contact`, and `email` of the new contact.\n  * `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#save_new_contact/2-parameters"},{"type":"function","title":"Returns - AddressBookEcto.save_new_contact/2","doc":"* This function interacts with the database and then calls `view/1` or `main_loop/1`.\n    It does not return a specific value itself.","ref":"AddressBookEcto.html#save_new_contact/2-returns"},{"type":"function","title":"AddressBookEcto.search/1","doc":"Searches contacts for the current user based on a provided search term.\n\nIt performs a case-insensitive search across first name, last name, contact number, and email.\nUsers can type `*` to cancel and return to the main menu.","ref":"AddressBookEcto.html#search/1"},{"type":"function","title":"Parameters - AddressBookEcto.search/1","doc":"* `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#search/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.search/1","doc":"* This function interacts with the database and the user interface.\n    It then calls `main_loop(current_user)`. It does not return a specific value.","ref":"AddressBookEcto.html#search/1-returns"},{"type":"function","title":"AddressBookEcto.view/1","doc":"Views and displays all contacts associated with the `current_user`.\n\nIf the user has no contacts, a message indicating this is displayed.","ref":"AddressBookEcto.html#view/1"},{"type":"function","title":"Parameters - AddressBookEcto.view/1","doc":"* `current_user`: The `AddressBookEcto.User` struct of the currently logged-in user.","ref":"AddressBookEcto.html#view/1-parameters"},{"type":"function","title":"Returns - AddressBookEcto.view/1","doc":"* This function interacts with the database and the user interface.\n    It then calls `main_loop(current_user)`. It does not return a specific value.","ref":"AddressBookEcto.html#view/1-returns"},{"type":"module","title":"AddressBookEcto.Contact","doc":"","ref":"AddressBookEcto.Contact.html"},{"type":"type","title":"AddressBookEcto.Contact.t/0","doc":"","ref":"AddressBookEcto.Contact.html#t:t/0"},{"type":"module","title":"AddressBookEcto.Repo","doc":"","ref":"AddressBookEcto.Repo.html"},{"type":"function","title":"AddressBookEcto.Repo.aggregate/3","doc":"","ref":"AddressBookEcto.Repo.html#aggregate/3"},{"type":"function","title":"AddressBookEcto.Repo.aggregate/4","doc":"","ref":"AddressBookEcto.Repo.html#aggregate/4"},{"type":"function","title":"AddressBookEcto.Repo.all/2","doc":"","ref":"AddressBookEcto.Repo.html#all/2"},{"type":"function","title":"AddressBookEcto.Repo.checked_out?/0","doc":"","ref":"AddressBookEcto.Repo.html#checked_out?/0"},{"type":"function","title":"AddressBookEcto.Repo.checkout/2","doc":"","ref":"AddressBookEcto.Repo.html#checkout/2"},{"type":"function","title":"AddressBookEcto.Repo.child_spec/1","doc":"","ref":"AddressBookEcto.Repo.html#child_spec/1"},{"type":"function","title":"AddressBookEcto.Repo.config/0","doc":"","ref":"AddressBookEcto.Repo.html#config/0"},{"type":"function","title":"AddressBookEcto.Repo.default_options/1","doc":"","ref":"AddressBookEcto.Repo.html#default_options/1"},{"type":"function","title":"AddressBookEcto.Repo.delete/2","doc":"","ref":"AddressBookEcto.Repo.html#delete/2"},{"type":"function","title":"AddressBookEcto.Repo.delete!/2","doc":"","ref":"AddressBookEcto.Repo.html#delete!/2"},{"type":"function","title":"AddressBookEcto.Repo.delete_all/2","doc":"","ref":"AddressBookEcto.Repo.html#delete_all/2"},{"type":"function","title":"AddressBookEcto.Repo.disconnect_all/2","doc":"A convenience function for SQL-based repositories that forces all connections in the\npool to disconnect within the given interval.\n\nSee `Ecto.Adapters.SQL.disconnect_all/3` for more information.","ref":"AddressBookEcto.Repo.html#disconnect_all/2"},{"type":"function","title":"AddressBookEcto.Repo.exists?/2","doc":"","ref":"AddressBookEcto.Repo.html#exists?/2"},{"type":"function","title":"AddressBookEcto.Repo.explain/3","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar\ndepending on the adapter to obtain statistics for the given query.\n\nSee `Ecto.Adapters.SQL.explain/4` for more information.","ref":"AddressBookEcto.Repo.html#explain/3"},{"type":"function","title":"AddressBookEcto.Repo.get/3","doc":"","ref":"AddressBookEcto.Repo.html#get/3"},{"type":"function","title":"AddressBookEcto.Repo.get!/3","doc":"","ref":"AddressBookEcto.Repo.html#get!/3"},{"type":"function","title":"AddressBookEcto.Repo.get_by/3","doc":"","ref":"AddressBookEcto.Repo.html#get_by/3"},{"type":"function","title":"AddressBookEcto.Repo.get_by!/3","doc":"","ref":"AddressBookEcto.Repo.html#get_by!/3"},{"type":"function","title":"AddressBookEcto.Repo.get_dynamic_repo/0","doc":"","ref":"AddressBookEcto.Repo.html#get_dynamic_repo/0"},{"type":"function","title":"AddressBookEcto.Repo.in_transaction?/0","doc":"","ref":"AddressBookEcto.Repo.html#in_transaction?/0"},{"type":"function","title":"AddressBookEcto.Repo.insert/2","doc":"","ref":"AddressBookEcto.Repo.html#insert/2"},{"type":"function","title":"AddressBookEcto.Repo.insert!/2","doc":"","ref":"AddressBookEcto.Repo.html#insert!/2"},{"type":"function","title":"AddressBookEcto.Repo.insert_all/3","doc":"","ref":"AddressBookEcto.Repo.html#insert_all/3"},{"type":"function","title":"AddressBookEcto.Repo.insert_or_update/2","doc":"","ref":"AddressBookEcto.Repo.html#insert_or_update/2"},{"type":"function","title":"AddressBookEcto.Repo.insert_or_update!/2","doc":"","ref":"AddressBookEcto.Repo.html#insert_or_update!/2"},{"type":"function","title":"AddressBookEcto.Repo.load/2","doc":"","ref":"AddressBookEcto.Repo.html#load/2"},{"type":"function","title":"AddressBookEcto.Repo.one/2","doc":"","ref":"AddressBookEcto.Repo.html#one/2"},{"type":"function","title":"AddressBookEcto.Repo.one!/2","doc":"","ref":"AddressBookEcto.Repo.html#one!/2"},{"type":"function","title":"AddressBookEcto.Repo.preload/3","doc":"","ref":"AddressBookEcto.Repo.html#preload/3"},{"type":"function","title":"AddressBookEcto.Repo.prepare_query/3","doc":"","ref":"AddressBookEcto.Repo.html#prepare_query/3"},{"type":"function","title":"AddressBookEcto.Repo.put_dynamic_repo/1","doc":"","ref":"AddressBookEcto.Repo.html#put_dynamic_repo/1"},{"type":"function","title":"AddressBookEcto.Repo.query/3","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query/4` for more information.","ref":"AddressBookEcto.Repo.html#query/3"},{"type":"function","title":"AddressBookEcto.Repo.query!/3","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query!/4` for more information.","ref":"AddressBookEcto.Repo.html#query!/3"},{"type":"function","title":"AddressBookEcto.Repo.query_many/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many/4` for more information.","ref":"AddressBookEcto.Repo.html#query_many/3"},{"type":"function","title":"AddressBookEcto.Repo.query_many!/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many!/4` for more information.","ref":"AddressBookEcto.Repo.html#query_many!/3"},{"type":"function","title":"AddressBookEcto.Repo.reload/2","doc":"","ref":"AddressBookEcto.Repo.html#reload/2"},{"type":"function","title":"AddressBookEcto.Repo.reload!/2","doc":"","ref":"AddressBookEcto.Repo.html#reload!/2"},{"type":"function","title":"AddressBookEcto.Repo.rollback/1","doc":"","ref":"AddressBookEcto.Repo.html#rollback/1"},{"type":"function","title":"AddressBookEcto.Repo.start_link/1","doc":"","ref":"AddressBookEcto.Repo.html#start_link/1"},{"type":"function","title":"AddressBookEcto.Repo.stop/1","doc":"","ref":"AddressBookEcto.Repo.html#stop/1"},{"type":"function","title":"AddressBookEcto.Repo.stream/2","doc":"","ref":"AddressBookEcto.Repo.html#stream/2"},{"type":"function","title":"AddressBookEcto.Repo.to_sql/2","doc":"A convenience function for SQL-based repositories that translates the given query to SQL.\n\nSee `Ecto.Adapters.SQL.to_sql/3` for more information.","ref":"AddressBookEcto.Repo.html#to_sql/2"},{"type":"function","title":"AddressBookEcto.Repo.transaction/2","doc":"","ref":"AddressBookEcto.Repo.html#transaction/2"},{"type":"function","title":"AddressBookEcto.Repo.update/2","doc":"","ref":"AddressBookEcto.Repo.html#update/2"},{"type":"function","title":"AddressBookEcto.Repo.update!/2","doc":"","ref":"AddressBookEcto.Repo.html#update!/2"},{"type":"function","title":"AddressBookEcto.Repo.update_all/3","doc":"","ref":"AddressBookEcto.Repo.html#update_all/3"},{"type":"module","title":"AddressBookEcto.User","doc":"","ref":"AddressBookEcto.User.html"},{"type":"type","title":"AddressBookEcto.User.t/0","doc":"","ref":"AddressBookEcto.User.html#t:t/0"},{"type":"extras","title":"Elixir CLI Address Book (Ecto Version)","doc":"# Elixir CLI Address Book (Ecto Version)\n\nA basic command-line application in Elixir for managing personal contacts with multi-user support and database persistence using Ecto. This project serves as an educational resource for new Elixir developers to learn fundamental concepts, including Ecto database interactions, by exploring a functional example.\n\n**WARNING:** This application stores user passwords in plain text for simplicity and educational purposes. **DO NOT** use this code in any production environment. Secure password handling (hashing and salting) is essential for real-world applications.","ref":"readme.html"},{"type":"extras","title":"Features - Elixir CLI Address Book (Ecto Version)","doc":"* User Registration\n* User Login/Logout\n* Add New Contacts (per user)\n* Edit Existing Contacts (per user)\n* View All Contacts (for the logged-in user)\n* Delete Contacts (per user)\n* Search Contacts (by name, number, or email for the logged-in user)\n* Data persistence to a relational database using Ecto.","ref":"readme.html#features"},{"type":"extras","title":"How to Run - Elixir CLI Address Book (Ecto Version)","doc":"1.  **Prerequisites:**\n    * Elixir and Erlang/OTP installed on your system. You can find installation instructions [here](https://elixir-lang.org/install.html).\n    * A running database server (e.g., PostgreSQL, MySQL, SQLite). This README assumes PostgreSQL, but you can adapt the `config/config.exs` and dependency (`mix.exs`) for other databases.\n2.  **Clone the repository:**\n    ```bash\n    git clone [https://github.com/1Bernard/address_book_elixir_ecto](https://github.com/1Bernard/address_book_elixir_ecto) # Update with your Ecto repo URL\n    cd address_book_elixir_ecto\n    ```\n3.  **Configure Database Connection:**\n    * Open the `config/config.exs` file in your project.\n    * Locate the `config :address_book_ecto, AddressBookEcto.Repo` block.\n    * Update the `username`, `password`, `database`, `hostname`, and `port` fields to match your local database server's credentials and connection details.\n\n    *Example `config/config.exs` snippet (adjust for your database type and credentials):*\n    ```elixir\n    import Config\n\n    # Configure your database\n    config :address_book_ecto, AddressBookEcto.Repo,\n      adapter: Ecto.Adapters.Postgres, # Or Ecto.Adapters.MySQL, Ecto.Adapters.SQLite3, etc.\n      username: \"your_database_username\",\n      password: \"your_database_password\",\n      database: \"your_database_name\", # Or your desired database name\n      hostname: \"your_database_hostname_or_ip\", # E.g., \"localhost\" or a remote address\n      port: 5432, # Default PostgreSQL port, adjust if needed (must be an integer)\n      pool_size: 10 # Example pool size, adjust if needed\n\n    # Tell the application about its Ecto repository\n    config :address_book_ecto,\n      ecto_repos: [AddressBookEcto.Repo]\n\n    # You might have other configurations here as well\n    ```\n    *Make sure the `port` is configured as an integer (e.g., `5432`) instead of a string.*\n\n4.  **Fetch dependencies:**\n    ```bash\n    mix deps.get\n    ```\n    This will download Ecto, the database adapter (like Postgrex), and `ex_doc`, needed for documentation generation.\n5.  **Create and Migrate Database:**\n    * Ensure your database server is running and accessible from where you are running these commands.\n    * Run the following commands in your terminal from the project root:\n    ```bash\n    mix ecto.create\n    mix ecto.migrate\n    ```mix ecto.create` will attempt to create the database specified in your `config/config.exs`. `mix ecto.migrate` will run the database migration files located in `priv/repo/migrations/` to set up the necessary tables (users and contacts).\n6.  **Run the application using Mix:**\n    ```bash\n    mix run --no-halt\n    ```\n    The `--no-halt` flag keeps the application running after initialization, allowing you to interact with the CLI. The application will start, display a welcome message, and present the authentication menu.","ref":"readme.html#how-to-run"},{"type":"extras","title":"Project Structure - Elixir CLI Address Book (Ecto Version)","doc":"Your project has the following key directories and files:\n\n* `address_book_ecto/`: A directory containing other modules specific to your application.\n    * `application.ex`: The OTP application entry point, defining the supervision tree.\n    * `repo.ex`: The Ecto repository module, used for interacting with the database.\n    * `user.ex`: The Ecto schema and changeset for the `User` model.\n    * `contact.ex`: The Ecto schema and changeset for the `Contact` model.\n\n* `priv/`: Contains private files, often used for repository-specific tasks.\n    * `repo/`: Contains files related to your Ecto repository.\n        * `migrations/`: Directory containing Ecto database migration files.","ref":"readme.html#project-structure"},{"type":"extras","title":"Code Overview and Key Concepts for Learning - Elixir CLI Address Book (Ecto Version)","doc":"This application is designed to demonstrate several core Elixir and functional programming concepts, along with Ecto for database interaction:\n\n1.  **Modules and Functions:** The code is organized into logical units (`AddressBookEcto`, `AddressBookEcto.User`, `AddressBookEcto.Contact`, `AddressBookEcto.Repo`). Explore how functions are defined (`def`, `defp`) and called. Pay attention to the `@moduledoc` and `@doc` attributes used for documentation.\n2.  **State Management with Recursion:** Notice the `AddressBookEcto.main_loop/1` function. Instead of mutable state and imperative loops, the application state (the `current_user`) is passed as an argument in recursive function calls. This is a common functional pattern for managing state in long-running processes or simple state machines.\n3.  **Ecto for Database Interaction:** Learn how Ecto is used to define schemas (`AddressBookEcto.User`, `AddressBookEcto.Contact`), build changesets for data validation and casting, and interact with the database via the repository (`AddressBookEcto.Repo`). See examples of `Repo.get_by/2`, `Repo.insert/1`, `Repo.update/1`, `Repo.delete/1`, and Ecto queries (`import Ecto.Query`, `from c in ...`).\n4.  **Changesets:** Understand how `Ecto.Changeset` is used to validate and prepare data before inserting or updating records in the database.\n5.  **Pattern Matching and `case` Expressions:** Observe how `case` expressions and pattern matching are used extensively to handle different user inputs (`\"1\"`, `\"2\"`, etc.) and function return values (e.g., `{:ok, result}`, `{:error, changeset}` from Repo operations).\n6.  **Data Structures (Structs, Maps, and Lists):** User and contact data fetched from the database are represented as Elixir Structs (`%AddressBookEcto.User{}`, `%AddressBookEcto.Contact{}`). Maps are used for passing attributes. Collections of structs are managed as Lists (`[]`). The `Enum` module is used to work with these lists.\n7.  **The `Enum` Module:** Elixir's `Enum` module provides powerful functions for working with collections. See examples of `Enum.filter`, `Enum.empty?`, etc. for data manipulation and querying results from the database.\n8.  **The `String` Module:** Learn how `String.trim`, `String.downcase`, `String.contains?` are used for input processing and searching.\n9.  **User Interaction (`IO` module):** `IO.gets/1` is used to get input from the user (including handling the `:eof` case for Ctrl+D), and `IO.puts/1` is used to display output.","ref":"readme.html#code-overview-and-key-concepts-for-learning"},{"type":"extras","title":"Generating HTML Documentation - Elixir CLI Address Book (Ecto Version)","doc":"The code includes `@moduledoc` and `@doc` attributes. You can generate browsable HTML documentation from these comments using `ExDoc`:\n\n1.  Make sure you have fetched dependencies (`mix deps.get`). ExDoc should be included in your `mix.exs` `deps` function, typically under `only: :dev`.\n2.  Run the documentation task:\n    ```bash\n    mix docs\n    ```\n3.  Open the generated documentation in your web browser by opening the file `doc/index.html`.","ref":"readme.html#generating-html-documentation"},{"type":"extras","title":"Areas for Improvement and Further Learning - Elixir CLI Address Book (Ecto Version)","doc":"This application can be extended and improved in many ways. Consider implementing some of these to further practice your Elixir and Ecto skills:\n\n* **Security:** **Implement secure password hashing** (e.g., using the `bcrypt_elixir` library and integrating it with your User schema and login logic) instead of plain text storage and comparison.\n* **Data Validation:** Enhance validation in your Ecto changesets to ensure contact details (like email format or phone number) are valid before saving.\n* **Error Handling:** Make the error handling more sophisticated, perhaps providing more user-friendly messages for specific issues or logging errors.\n* **Concurrency:** How would you handle multiple processes or users interacting with the application simultaneously? While Ecto helps manage database connections, the CLI structure is single-user.\n* **More Features:** Add sorting contacts by name, filtering by other criteria, exporting contacts to a different format (like CSV), importing contacts.\n* **Testing:** Write unit tests for your functions, especially the login/registration logic and contact management functions that interact with the Repo. Write tests for your Ecto schemas and changesets.\n* **Supervisors:** Review your `application.ex` file and understand how the Repo is supervised. For more complex applications, you'd add more processes under supervision.","ref":"readme.html#areas-for-improvement-and-further-learning"},{"type":"extras","title":"Getting Started as a New Team Member - Elixir CLI Address Book (Ecto Version)","doc":"This project is your starting point for learning Elixir CLI development with Ecto. Here's a suggested path:\n\n1.  **Get it Running:** Follow the \"How to Run\" instructions above to ensure you can start and interact with the application. Register a user and add some contacts. Verify that data is being stored in your configured database.\n2.  **Explore the Code:** Read through `lib/address_book_ecto.ex`, `lib/address_book_ecto/user.ex`, `lib/address_book_ecto/contact.ex`, and `lib/address_book_ecto/repo.ex`. Use the inline `@moduledoc` and `@doc` comments directly in your editor, or generate the HTML documentation (`mix docs`) and browse it in your web browser.\n3.  **Trace Execution:** As you interact with the running application, try to follow the code path in your editor. For example, choose \"1\" from the contact menu (\"Add Contact\") and trace how `handle_contact_action` calls `create`, which then calls `get_input` multiple times, leads to `review_new_contact`, and finally calls `save_new_contact` which interacts with `AddressBookEcto.Repo.insert`.\n4.  **Identify Key Patterns:** Look for the recurring patterns like state passing in `main_loop`, `case` statements for handling different outcomes (input, Repo operations), Ecto schema and changeset usage, and `Enum` functions for list manipulation.\n5.  **Implement an Improvement:** Pick one item from the \"Areas for Improvement\" list (e.g., add basic validation to ensure the email address input contains \"@\" and \".\" within the Contact changeset) and try to implement it. This hands-on practice is invaluable.\n6.  **Build Your Own:** Once you feel comfortable, try starting a new Mix project (`mix new my_cli_app_with_db`) and build something similar but different (e.g., a task tracker, a simple inventory) using Ecto, referencing this project as a template for structure and database interaction.","ref":"readme.html#getting-started-as-a-new-team-member"},{"type":"extras","title":"License - Elixir CLI Address Book (Ecto Version)","doc":"This project is open-source under the [MIT License](LICENSE).","ref":"readme.html#license"},{"type":"extras","title":"Contributing - Elixir CLI Address Book (Ecto Version)","doc":"(Optional section: If you want to accept contributions from team members for improving this example)","ref":"readme.html#contributing"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}